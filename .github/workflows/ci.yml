name: 🚀 OpenInferencev2 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  CUDA_VERSION: '11.8'

jobs:
  # Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: 🎨 Code Formatting Check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: 🔍 Linting
        run: |
          flake8 --statistics --count
          mypy openinferencev2/ --ignore-missing-imports

      - name: 🔒 Security Scan
        run: |
          bandit -r openinferencev2/ -f json -o bandit-report.json
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Multi-Platform Testing
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to reduce CI time
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: 🧪 Run Basic Tests
        run: python test_basic.py

      - name: 🔬 Run Test Suite
        run: |
          python -m pytest tests/ -v --tb=short \
            --cov=openinferencev2 \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=junit.xml

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  # GPU Testing (when available)
  gpu-test:
    name: 🚀 GPU Tests
    runs-on: [self-hosted, gpu]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Check CUDA
        run: |
          nvidia-smi
          nvcc --version

      - name: 📦 Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install -e .

      - name: 🚀 Run GPU Tests
        run: |
          python -m pytest tests/ -v -m gpu --tb=short
          python final_demo.py

  # Performance Benchmarks
  benchmark:
    name: 📊 Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install -e .

      - name: 🏃 Run Benchmarks
        run: |
          python -m pytest tests/ -v -m benchmark \
            --benchmark-json=benchmark.json \
            --benchmark-histogram

      - name: 📈 Store Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Docker Build & Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          docker run --rm ghcr.io/${{ github.repository }}:${{ github.sha }} \
            python test_basic.py

  # Documentation
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: 📖 Build Documentation
        run: |
          sphinx-build -b html docs/ docs/_build/html

      - name: 🌐 Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # Release Management
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [quality, test, docker, docs]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build Package
        run: python -m build

      - name: 🔍 Check Package
        run: twine check dist/*

      - name: 📦 Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*

      - name: 📝 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false

  # Deployment (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☸️ Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to production Kubernetes cluster..."
          # kubectl apply -f k8s/
          echo "✅ Deployment completed!"

  # Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [quality, test, docker, docs]
    if: always()
    steps:
      - name: 📊 Report Status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ CI/CD Pipeline completed successfully!"
          else
            echo "❌ CI/CD Pipeline failed!"
            exit 1
          fi 